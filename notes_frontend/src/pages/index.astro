---
import Layout from '../layouts/Layout.astro';
---

<Layout>
  <main class="container">
    <header class="header">
      <h1 class="app-title">My Notes</h1>
      <a class="btn btn-primary" href="/notes/new">+ New Note</a>
    </header>

    <section id="notes-root" class="notes-root" data-page="list">
      <div class="notes-toolbar">
        <input id="search" type="search" placeholder="Search notes..." aria-label="Search notes" />
        <div class="actions">
          <button id="refresh" class="btn btn-secondary" aria-label="Refresh notes">Refresh</button>
        </div>
      </div>

      <div id="list" class="notes-list" aria-live="polite" aria-busy="true">
        <!-- populated by client script -->
      </div>
    </section>
  </main>

  <script type="module">
    import { api } from '../services/api.ts';
    import { renderNoteCard } from '../services/render.ts';

    const listEl = document.getElementById('list');
    const searchEl = document.getElementById('search');
    const refreshBtn = document.getElementById('refresh');

    let allNotes = [];
    let isLoading = false;

    function setBusy(busy) {
      isLoading = busy;
      listEl.setAttribute('aria-busy', busy ? 'true' : 'false');
    }

    function renderList(items) {
      if (!items.length) {
        listEl.innerHTML = '<div class="empty">No notes found. Create your first note!</div>';
        return;
      }
      listEl.innerHTML = items.map(renderNoteCard).join('');
      // attach actions
      listEl.querySelectorAll('[data-action="delete"]').forEach(btn => {
        btn.addEventListener('click', async (e) => {
          const id = btn.getAttribute('data-id');
          if (!id) return;
          const ok = confirm('Delete this note? This cannot be undone.');
          if (!ok) return;
          try {
            await api.deleteNote(id);
            allNotes = allNotes.filter(n => n.id !== id);
            renderList(filterByQuery(searchEl.value));
          } catch (err) {
            console.error(err);
            alert('Failed to delete note.');
          }
        });
      });
    }

    function filterByQuery(q) {
      const query = (q || '').toLowerCase().trim();
      if (!query) return allNotes;
      return allNotes.filter(n =>
        (n.title || '').toLowerCase().includes(query) ||
        (n.content || '').toLowerCase().includes(query)
      );
    }

    async function load() {
      setBusy(true);
      try {
        allNotes = await api.listNotes();
        renderList(filterByQuery(searchEl.value));
      } catch (err) {
        console.error(err);
        listEl.innerHTML = '<div class="error">Failed to load notes. Please try again.</div>';
      } finally {
        setBusy(false);
      }
    }

    searchEl.addEventListener('input', () => {
      renderList(filterByQuery(searchEl.value));
    });

    refreshBtn.addEventListener('click', load);

    // initial load
    load();
  </script>

  <style>
    .container {
      max-width: 960px;
      margin: 0 auto;
      padding: 24px 16px 48px;
    }

    .header {
      display: flex;
      align-items: center;
      justify-content: space-between;
      gap: 12px;
      margin-bottom: 16px;
    }

    .app-title {
      margin: 0;
      font-size: 28px;
      letter-spacing: -0.02em;
    }

    .notes-toolbar {
      display: flex;
      gap: 12px;
      align-items: center;
      margin: 12px 0 20px;
      flex-wrap: wrap;
    }

    .notes-toolbar input[type="search"] {
      flex: 1;
      min-width: 240px;
      padding: 12px 14px;
      border-radius: 10px;
      border: 1px solid var(--border-color);
      background: var(--card-bg);
      color: var(--text-color);
      box-shadow: 0 1px 2px var(--shadow-color) inset;
      outline: none;
    }
    .notes-toolbar input[type="search"]:focus {
      border-color: #7c3aed;
      box-shadow: 0 0 0 3px rgba(124,58,237,0.15);
    }

    .actions { display: flex; gap: 8px; }

    .btn {
      display: inline-flex;
      align-items: center;
      justify-content: center;
      gap: 8px;
      padding: 10px 14px;
      border-radius: 10px;
      border: 1px solid var(--border-color);
      cursor: pointer;
      text-decoration: none;
      color: var(--text-color);
      background: var(--card-bg);
      transition: background .2s, box-shadow .2s, transform .06s ease-in-out;
      box-shadow: 0 2px 4px var(--shadow-color);
      user-select: none;
    }
    .btn:active { transform: translateY(1px); }
    .btn:hover { box-shadow: 0 4px 10px var(--shadow-hover-color); }

    .btn-primary {
      color: #fff;
      background: linear-gradient(83deg,#7c3aed,#2563eb);
      border-color: transparent;
    }
    .btn-secondary { background: var(--card-bg); }

    .notes-list {
      display: grid;
      grid-template-columns: repeat(3, minmax(0, 1fr));
      gap: 16px;
    }

    @media (max-width: 980px) {
      .notes-list { grid-template-columns: repeat(2, minmax(0, 1fr)); }
    }
    @media (max-width: 640px) {
      .notes-list { grid-template-columns: 1fr; }
    }

    .note-card {
      display: flex;
      flex-direction: column;
      gap: 10px;
      padding: 14px;
      background: var(--card-bg);
      border: 1px solid var(--border-color);
      border-radius: 12px;
      box-shadow: 0 2px 6px var(--shadow-color);
      min-height: 120px;
    }
    .note-meta {
      display: flex; justify-content: space-between; align-items: center; gap: 8px;
    }
    .note-title {
      margin: 0; font-size: 18px; font-weight: 600; letter-spacing: -0.01em;
    }
    .note-updated {
      font-size: 12px; color: var(--text-secondary);
    }
    .note-content {
      color: var(--text-secondary);
      white-space: pre-wrap;
    }
    .note-actions {
      display: flex; gap: 8px; margin-top: auto;
    }
    .note-actions a, .note-actions button {
      padding: 8px 10px; border-radius: 8px; border: 1px solid var(--border-color);
      background: var(--card-bg); color: var(--text-color); text-decoration: none; cursor: pointer;
    }
    .note-actions a:hover, .note-actions button:hover { background: var(--card-hover-bg); }
    .note-actions .danger { border-color: #ef4444; color: #ef4444; }

    .empty, .error {
      padding: 24px;
      text-align: center;
      border: 1px dashed var(--border-color);
      border-radius: 12px;
      color: var(--text-secondary);
      background: var(--card-bg);
    }
  </style>
</Layout>
